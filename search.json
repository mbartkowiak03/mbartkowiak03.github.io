[
  {
    "objectID": "basic-python-intro.html",
    "href": "basic-python-intro.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic-python-intro.html#what-is-python",
    "href": "basic-python-intro.html#what-is-python",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic-python-intro.html#variables-and-data-types",
    "href": "basic-python-intro.html#variables-and-data-types",
    "title": "Introduction to Python",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "basic-python-intro.html#control-structures",
    "href": "basic-python-intro.html#control-structures",
    "title": "Introduction to Python",
    "section": "Control Structures",
    "text": "Control Structures\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "basic-python-intro.html#functions",
    "href": "basic-python-intro.html#functions",
    "title": "Introduction to Python",
    "section": "Functions",
    "text": "Functions\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "basic-python-intro.html#lists-and-dictionaries",
    "href": "basic-python-intro.html#lists-and-dictionaries",
    "title": "Introduction to Python",
    "section": "Lists and Dictionaries",
    "text": "Lists and Dictionaries\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nAnalyzing Spotify Dataframe\n\n\n\n\n\n\n\n\n\nMar 7, 2024\n\n\nMiranda Bartkowiak\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\n\nFeb 17, 2024\n\n\nMiranda Bartkowiak\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nBeer Markets\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\nByeong-Hak Choe\n\n\n9 min\n\n\n\n\n\n\n  \n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl-210-quarto-reticulate.html",
    "href": "danl-210-quarto-reticulate.html",
    "title": "DANL 210: Data Preparation and Management",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "danl-210-quarto-reticulate.html#variables-and-data-types",
    "href": "danl-210-quarto-reticulate.html#variables-and-data-types",
    "title": "DANL 210: Data Preparation and Management",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "danl-210-quarto-reticulate.html#control-structures",
    "href": "danl-210-quarto-reticulate.html#control-structures",
    "title": "DANL 210: Data Preparation and Management",
    "section": "0.2 Control Structures",
    "text": "0.2 Control Structures\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\nFive is greater than two!"
  },
  {
    "objectID": "danl-210-quarto-reticulate.html#functions",
    "href": "danl-210-quarto-reticulate.html#functions",
    "title": "DANL 210: Data Preparation and Management",
    "section": "0.3 Functions",
    "text": "0.3 Functions\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\nHello from a function"
  },
  {
    "objectID": "danl-210-quarto-reticulate.html#lists-and-dictionaries",
    "href": "danl-210-quarto-reticulate.html#lists-and-dictionaries",
    "title": "DANL 210: Data Preparation and Management",
    "section": "0.4 Lists and Dictionaries",
    "text": "0.4 Lists and Dictionaries\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "danl-210-quarto-reticulate.html#import-python-libraries",
    "href": "danl-210-quarto-reticulate.html#import-python-libraries",
    "title": "DANL 210: Data Preparation and Management",
    "section": "1.1 Import Python libraries",
    "text": "1.1 Import Python libraries\n\nimport pandas as pd\n\n\noj = pd.read_csv('https://bcdanl.github.io/data/dominick_oj.csv')\n\n\n\nCode!\noj\n\n\n         sales  price      brand  ad\n0       8256.0   3.87  tropicana   0\n1       6144.0   3.87  tropicana   0\n2       3840.0   3.87  tropicana   0\n3       8000.0   3.87  tropicana   0\n4       8896.0   3.87  tropicana   0\n...        ...    ...        ...  ..\n28942   2944.0   2.00  dominicks   0\n28943   4928.0   1.94  dominicks   0\n28944  13440.0   1.59  dominicks   0\n28945  55680.0   1.49  dominicks   0\n28946   7040.0   1.75  dominicks   0\n\n[28947 rows x 4 columns]\n\n\n\noj.describe()\n\n               sales         price            ad\ncount   28947.000000  28947.000000  28947.000000\nmean    17312.213356      2.282488      0.237261\nstd     27477.660437      0.648001      0.425411\nmin        64.000000      0.520000      0.000000\n25%      4864.000000      1.790000      0.000000\n50%      8384.000000      2.170000      0.000000\n75%     17408.000000      2.730000      0.000000\nmax    716416.000100      3.870000      1.000000"
  },
  {
    "objectID": "danl-210-quarto-reticulate.html#python-r-interaction",
    "href": "danl-210-quarto-reticulate.html#python-r-interaction",
    "title": "DANL 210: Data Preparation and Management",
    "section": "1.2 Python-R Interaction",
    "text": "1.2 Python-R Interaction\nBelow is using Python’s DataFrame oj to visualize using R’s ggplot\n\nlibrary(tidyverse)\n\n# Access the Python pandas DataFrame\noj &lt;- py$oj\n\n# Plot using ggplot2\nggplot(oj, aes(x = log(sales), y = log(price), \n               color = brand)) +\n  geom_point(alpha = .25) +\n  geom_smooth(method = lm) +\n  theme_minimal()\n\n\n\n\n\n1.2.1 Interactive DataFrame with R’s DT Package\n\n\n\n\n\n\n\nIn *.ipynb on Google Colab, we can use itables or just Google Colab’s default to print DataFrame.\n\n# !pip install itables\nfrom itables import init_notebook_mode, show\ninit_notebook_mode(all_interactive=False)\n\noj = pd.read_csv('https://bcdanl.github.io/data/dominick_oj.csv')\nshow(oj)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Miranda Bartkowiak",
    "section": "",
    "text": "Hello! I am Miranda Bartkowiak and I major in Economics and minor in Mathematics at SUNY Geneseo. I am currently working on my own economics research and I am also a TA for Differential Equations. When I am not working on my coursework, I enjoy spending time listening to music and playing with my dog."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Miranda Bartkowiak",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.A. in Economics | Aug 2021 - Dec 2024  Minor in Mathematics"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Miranda Bartkowiak",
    "section": "Experience",
    "text": "Experience\nMath Learning Center | Mathematics Tutor | Sept 2023 - Present\nSchool of Business | Intermediate Microeconomics Tutor | Feb 2023 - May 2023"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html",
    "href": "posts/beer-markets/beer-markets.html",
    "title": "Beer Markets",
    "section": "",
    "text": "Let’s analyze the beer_data data:\nbeer_data &lt;- read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#variable-description-for-beer_data-data.frame",
    "href": "posts/beer-markets/beer-markets.html#variable-description-for-beer_data-data.frame",
    "title": "Beer Markets",
    "section": "Variable Description for beer_data data.frame",
    "text": "Variable Description for beer_data data.frame\nThe following describes the variables in the beer_data data.frame.\n\nhh: Household identifier\n_purchase_desc: Description of the purchase\nquantity: The quantity of beer purchased\nbrand: The brand of beer\ndollar_spent: The amount spent\nbeer_floz: Fluid ounces of beer\nprice_per_floz: Price per fluid ounce\ncontainer: Type of container\npromo: Whether the purchase was on promotion\nmarket: The market where the purchase was made\nDemographics: age, employment status, degree, class of worker (cow), race, and household information like microwave, dishwasher, tvcable, singlefamilyhome, and npeople (number of people in the household)"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "href": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "title": "Beer Markets",
    "section": "Purchase Patterns",
    "text": "Purchase Patterns\nWe’ll explore the purchase patterns in the dataset. This includes understanding the most popular brands, the average quantity purchased, and spending habits across different markets. Here are some specific analyses we can perform:\n\nCalculate the total quantity and spending for each brand.\nFind the average quantity purchased and average spending per purchase.\nCompare the total spending across different markets.\n\nI’ll begin with these analyses and create visualizations to help us understand the data better. Let’s start by calculating the total quantity and spending for each brand.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reading the CSV file\nbeer_data = pd.read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")\n\n# Setting up the visualisation settings\nsns.set(style=\"whitegrid\")\n\n# Calculate total quantity and spending for each brand\nbrand_summary = beer_data.groupby('brand').agg({'quantity':'sum', 'dollar_spent':'sum'}).reset_index()\n\n# Sort by total quantity and spending\nbrand_summary_sorted_quantity = brand_summary.sort_values('quantity', ascending=False)\nbrand_summary_sorted_spent = brand_summary.sort_values('dollar_spent', ascending=False)\n\n\n# Plotting total quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=brand_summary_sorted_quantity, palette='viridis')\nplt.title('Total Quantity of Beer Purchased by Brand')\nplt.xlabel('Total Quantity')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n# Plotting total spending for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='dollar_spent', y='brand', data=brand_summary_sorted_spent, palette='viridis')\nplt.title('Total Spending on Beer by Brand')\nplt.xlabel('Total Spending')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar charts above display the total quantity of beer purchased and the total spending by brand. From the looks of it, certain brands dominate in terms of quantity sold and total spending, indicating their popularity.\nNow, let’s calculate the average quantity purchased and average spending per purchase. For this, we’ll consider each row in the dataset as a separate purchase and compute the averages accordingly.\n\n# Calculate average quantity purchased and average spending per purchase\naverage_purchase = beer_data.groupby('brand').agg({\n    'quantity': 'mean', \n    'dollar_spent': 'mean'\n}).reset_index()\n\n# Sort by average quantity and average spending\naverage_purchase_sorted_quantity = average_purchase.sort_values('quantity', ascending=False)\naverage_purchase_sorted_spent = average_purchase.sort_values('dollar_spent', ascending=False)\n\n# Plotting average quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=average_purchase_sorted_quantity, palette='viridis')\nplt.title('Average Quantity of Beer Purchased by Brand')\nplt.xlabel('Average Quantity')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n# Plotting average spending for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='dollar_spent', y='brand', data=average_purchase_sorted_spent, palette='viridis')\nplt.title('Average Spending on Beer by Brand')\nplt.xlabel('Average Spending')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe visualizations above depict the average quantity of beer purchased per brand and the average spending per brand. This shows which brands tend to be bought in larger quantities on average and which brands tend to have higher spending per purchase, which could be indicative of their price point or the purchase of premium products.\nNext, we’ll look at the total spending across different markets to see if there are any notable differences in spending habits geographically. To do this, we’ll sum up the spending in each market and visualize it.\n\n# Calculate total spending in each market\nmarket_spending_summary = beer_data.groupby('market').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nmarket_spending_summary_sorted = market_spending_summary.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending in each market\nplt.figure(figsize=(12, 10))\nsns.barplot(x='dollar_spent', y='market', data=market_spending_summary_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Market')\nplt.xlabel('Total Spending')\nplt.ylabel('Market')\nplt.show()\n\n\n\n\nThe bar chart illustrates the total spending on beer by market, showcasing the differences in spending habits across various regions. Some markets have significantly higher spending, which could be due to a variety of factors including market size, consumer preferences, or economic factors.\nNow, let’s move on to the second analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#demographic-analysis",
    "href": "posts/beer-markets/beer-markets.html#demographic-analysis",
    "title": "Beer Markets",
    "section": "Demographic Analysis",
    "text": "Demographic Analysis\nWe will examine which demographics are buying what kind of beer and whether spending habits vary by demographics such as age, employment, and race. For this, we could look at:\n\nSpending by age group\nSpending by employment status\nSpending by race\n\nI’ll start by analyzing spending by age group.\n\n# Calculate total spending by age group\nage_group_spending = beer_data.groupby('age').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nage_group_spending_sorted = age_group_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by age group\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='age', data=age_group_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Age Group')\nplt.xlabel('Total Spending')\nplt.ylabel('Age Group')\nplt.show()\n\n\n\n\nThe bar chart demonstrates the total spending on beer segmented by age group, highlighting which age groups spend the most on beer. It appears that certain age groups are more dominant in beer spending, which may align with the purchasing power or preferences of those groups.\nNext, we will examine spending by employment status.\n\n# Calculate total spending by employment status\nemployment_spending = beer_data.groupby('employment').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nemployment_spending_sorted = employment_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by employment status\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='employment', data=employment_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Employment Status')\nplt.xlabel('Total Spending')\nplt.ylabel('Employment Status')\nplt.show()\n\n\n\n\nThe visualization shows the total spending on beer by employment status. We can see that certain employment groups, such as full-time workers, are spending more on beer, which might be related to their disposable income.\nFinally, let’s look at spending by race to complete the demographic analysis.\n\n# Calculate total spending by race\nrace_spending = beer_data.groupby('race').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nrace_spending_sorted = race_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by race\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='race', data=race_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Race')\nplt.xlabel('Total Spending')\nplt.ylabel('Race')\nplt.show()\n\n\n\n\nThe bar chart above indicates the total spending on beer broken down by race, highlighting which racial groups account for the most beer spending within the dataset. This could reflect both the demographics of the regions where the data was collected and cultural preferences regarding beer.\nNow, let’s proceed to the third analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#price-sensitivity",
    "href": "posts/beer-markets/beer-markets.html#price-sensitivity",
    "title": "Beer Markets",
    "section": "Price Sensitivity",
    "text": "Price Sensitivity\nWe’ll look at the price per fluid ounce and see if there are any trends or correlations with the quantity purchased or the brand popularity. To do this, we’ll calculate the average price per fluid ounce for each brand and then visualize how this relates to the average quantity purchased and the total quantity purchased by brand.\nFirst, let’s calculate the average price per fluid ounce for each brand.\n\n# Calculate average price per fluid ounce for each brand\nbrand_price_sensitivity = beer_data.groupby('brand').agg({\n    'price_per_floz': 'mean', \n    'quantity': 'sum'\n}).reset_index()\n\n# Sort by price per fluid ounce\nbrand_price_sensitivity_sorted = brand_price_sensitivity.sort_values('price_per_floz', ascending=True)\n\n# Plotting average price per fluid ounce for each brand and the total quantity purchased\nfig, ax1 = plt.subplots(figsize=(12, 10))\n\ncolor = 'tab:red'\nax1.set_xlabel('Brand')\nax1.set_ylabel('Average Price per Fluid Ounce', color=color)\nax1.bar(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['price_per_floz'], color=color)\nax1.tick_params(axis='y', labelcolor=color)\nax1.set_xticklabels(brand_price_sensitivity_sorted['brand'], rotation=90)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\ncolor = 'tab:blue'\nax2.set_ylabel('Total Quantity Purchased', color=color)  # we already handled the x-label with ax1\nax2.plot(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['quantity'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.title('Average Price per Fluid Ounce & Total Quantity Purchased by Brand')\nplt.show()\n\n\n\n\nIn the visualization, we have a bar graph showing the average price per fluid ounce for each brand (in red) and a line graph showing the total quantity purchased for each brand (in blue). This gives us a sense of whether there’s a relationship between the price and the quantity purchased. The x-axis labels are quite compressed due to the number of brands, but we can still observe trends such as whether lower-priced beers tend to be purchased in larger quantities.\nLastly, let’s move to the fourth analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#promotional-impact",
    "href": "posts/beer-markets/beer-markets.html#promotional-impact",
    "title": "Beer Markets",
    "section": "Promotional Impact",
    "text": "Promotional Impact\nWe’ll assess the impact of promotions on the quantity of beer purchased. For this analysis, we can calculate the average quantity purchased with and without promotions and visualize the difference. We’ll do this for each brand to see which brands are most affected by promotions.\nLet’s begin this analysis by looking at the average quantity purchased with and without promotions for each brand.\n\n# Calculate average quantity purchased with and without promotions for each brand\npromo_impact = beer_data.groupby(['brand', 'promo']).agg({'quantity':'mean'}).reset_index()\n\n# Pivot the data to have promo and non-promo side by side for each brand\npromo_impact_pivot = promo_impact.pivot(index='brand', columns='promo', values='quantity').reset_index()\npromo_impact_pivot.columns = ['brand', 'non_promo', 'promo']\n\n# Calculate the difference in average quantity purchased between promo and non-promo\npromo_impact_pivot['promo_impact'] = promo_impact_pivot['promo'] - promo_impact_pivot['non_promo']\n\n# Sort by the impact of promo\npromo_impact_pivot_sorted = promo_impact_pivot.sort_values('promo_impact', ascending=False)\n\n# Plotting the difference in average quantity purchased between promo and non-promo for each brand\nplt.figure(figsize=(12, 10))\nsns.barplot(x='promo_impact', y='brand', data=promo_impact_pivot_sorted, palette='viridis')\nplt.title('Impact of Promotions on Average Quantity Purchased by Brand')\nplt.xlabel('Difference in Average Quantity Purchased (Promo - Non-Promo)')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar chart illustrates the impact of promotions on the average quantity of beer purchased by brand. A positive value indicates that, on average, more beer is purchased when there is a promotion compared to when there isn’t. Some brands appear to be significantly more influenced by promotions, with customers buying more when the products are on sale or promotion.\nThis comprehensive analysis has provided insights into purchase patterns, demographic preferences, price sensitivity, and the impact of promotions on beer purchases."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Python Basics",
    "section": "",
    "text": "This is a blog post about the basics of Python we learned in our first few lectures."
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Analyzing Spotify Dataframe",
    "section": "",
    "text": "This is a blog post analyzing a Spotify DataFrame through methods like counting, sorting, indexing, and filtering."
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "About this project 👏\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL Project",
    "section": "2.1 Summary Statistics",
    "text": "2.1 Summary Statistics\n\nmpg &lt;- ggplot2::mpg\n\n\n\n\n  \n\n\n\nskim(mpg) %&gt;% \n  select(-n_missing)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\nskim_variable\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n1\n4\n10\n0\n15\n0\n\n\nmodel\n1\n2\n22\n0\n38\n0\n\n\ntrans\n1\n8\n10\n0\n10\n0\n\n\ndrv\n1\n1\n1\n0\n3\n0\n\n\nfl\n1\n1\n1\n0\n5\n0\n\n\nclass\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n▇▆▆▃▁\n\n\nyear\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n▇▁▁▁▇\n\n\ncyl\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n▇▁▇▁▇\n\n\ncty\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n▆▇▃▁▁\n\n\nhwy\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n▅▅▇▁▁"
  },
  {
    "objectID": "project.html#mpg-and-a-type-of-cars",
    "href": "project.html#mpg-and-a-type-of-cars",
    "title": "DANL Project",
    "section": "2.2 MPG and a Type of Cars",
    "text": "2.2 MPG and a Type of Cars\nThe following boxplot shows how the distribution of highway MPG (hwy) varies by a type of cars (class) 🚙 🚚 🚐.\n\nggplot(data = mpg) +\n  geom_boxplot(aes(x = class, y = hwy, fill = class),\n               show.legend = F) +\n  labs(x = \"Class\", y = \"Highway\\nMPG\")"
  },
  {
    "objectID": "posts/post-with-code/index.html#printing",
    "href": "posts/post-with-code/index.html#printing",
    "title": "Python Basics",
    "section": "Printing",
    "text": "Printing\n\n#we can print anything with print()\n\nprint(\"Let's learn Python together:)\")\n\nLet's learn Python together:)"
  },
  {
    "objectID": "posts/post-with-code/index.html#variables-and-data-types",
    "href": "posts/post-with-code/index.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nIn Python, there are different variables and data types that affect our code in different ways.\nFor example a few below are integers, string, and float variables:\n\ninteger_variable = 25\nstring_variable = 'Hello'\nfloat_variable = 13.5"
  },
  {
    "objectID": "posts/post-with-code/index.html#assignment-and-mathematical-operations",
    "href": "posts/post-with-code/index.html#assignment-and-mathematical-operations",
    "title": "Python Basics",
    "section": "Assignment and Mathematical Operations",
    "text": "Assignment and Mathematical Operations\nTo assign something in Python we use “=”\nAdditionally, we can use Python to compute mathematical expressions\n\nx = 32\n\n#once we have stored x we can use it for other things like math\ny = x-17\nprint(y)\n\n15\n\n\nPython can do a lot more math than just adding and subtracting.\n\n2**5/ (7*(4-2**3))\n\n-1.1428571428571428"
  },
  {
    "objectID": "posts/post-with-code/index.html#booleans-and-conditions",
    "href": "posts/post-with-code/index.html#booleans-and-conditions",
    "title": "Python Basics",
    "section": "Booleans and Conditions",
    "text": "Booleans and Conditions\nBoolean data has either True or False value\nFor example, “==” evaluates whether the objects on each side are the same\n\n10 == 20 \n#this will return false since 10 is not equal to 20\n\nFalse\n\n\n\n20 == '20' \n#this will return false since they are different variable types\n\nFalse\n\n\nThere is a lot more than can be done with True and False values later on."
  },
  {
    "objectID": "posts/post-with-code/index.html#lists-and-dictionaries",
    "href": "posts/post-with-code/index.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "Lists and Dictionaries",
    "text": "Lists and Dictionaries\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# An example of a list\nmy_list = ['TV', 'plant', 'desk']\n\n# A dictionary example:\nmy_dict = {'name': 'Miranda', 'age': 20}"
  },
  {
    "objectID": "posts/post-with-code/index.html#importing",
    "href": "posts/post-with-code/index.html#importing",
    "title": "Python Basics",
    "section": "Importing",
    "text": "Importing\nWe can import packages to aid us with our coding\n\n#import pandas as pd\n#!pip install itables\n#from itables import init_notebook_mode\n#from itables import show"
  },
  {
    "objectID": "posts/post-with-code/index.html#more-to-come",
    "href": "posts/post-with-code/index.html#more-to-come",
    "title": "Python Basics",
    "section": "More to Come",
    "text": "More to Come\nThis is just a short blog post about the basics of Python. Once you master the basics then you can get to the many things not mentioned in this blog post like functions and data visualization. As you learn more, keep in mind that Python is a skill that takes a lot of practice!"
  },
  {
    "objectID": "posts/post-with-code/index.html#if-statements",
    "href": "posts/post-with-code/index.html#if-statements",
    "title": "Python Basics",
    "section": "If Statements",
    "text": "If Statements\nWe can combine conditions with if statements to enact our code.\nHere is a simple example below,\n\nif x&lt;0:\n  print(\"Your number is negative\")\nelif x&gt;0:\n  print(\"Your number is positive\")\nelse:\n  print(\"Your number is 0\")\n\nYour number is positive"
  },
  {
    "objectID": "posts/post-with-code/index.html#for-loops",
    "href": "posts/post-with-code/index.html#for-loops",
    "title": "Python Basics",
    "section": "For Loops",
    "text": "For Loops\nA for loop executes a section of our code repeatedly.\n\nlist = [\"banana\", \"cherry\", \"orange\"]\n\nfor fruit in list:\n  print(fruit)\n\nbanana\ncherry\norange"
  },
  {
    "objectID": "posts/welcome/index.html#loading-the-dataframe",
    "href": "posts/welcome/index.html#loading-the-dataframe",
    "title": "Analyzing Spotify Dataframe",
    "section": "Loading the DataFrame",
    "text": "Loading the DataFrame\n\nimport pandas as pd\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')"
  },
  {
    "objectID": "posts/welcome/index.html#variable-description-for-spotify-dataframe",
    "href": "posts/welcome/index.html#variable-description-for-spotify-dataframe",
    "title": "Analyzing Spotify Dataframe",
    "section": "Variable Description for spotify DataFrame",
    "text": "Variable Description for spotify DataFrame\nThe following describes the variables in the spotify DataFrame.\n\npid playlist ID; unique ID for playlist\nplaylist_name a name of playlist\npos a position of the track within a playlist (starting from 0)\nartist_name name of the track’s primary artist\ntrack_name name of the track\nduration_ms duration of the track in milliseconds\nalbum_name name of the track’s album"
  },
  {
    "objectID": "posts/welcome/index.html#initial-characteristics",
    "href": "posts/welcome/index.html#initial-characteristics",
    "title": "Analyzing Spotify Dataframe",
    "section": "Initial Characteristics",
    "text": "Initial Characteristics\nWe can use describe() and nunique() to understand a bit more about the DataFrame.\n\nspotify.describe()\nspotify.nunique()\n\npid               2997\nplaylist_name     2184\npos                249\nartist_name      18866\ntrack_name       64115\nduration_ms      37910\nalbum_name       35497\ndtype: int64"
  },
  {
    "objectID": "posts/welcome/index.html#grouping",
    "href": "posts/welcome/index.html#grouping",
    "title": "Analyzing Spotify Dataframe",
    "section": "Grouping",
    "text": "Grouping\nWe can use .groupby() to organize the data into groups that share a categorical variable. These groups can be used for further analysis.\n\nplaylists = spotify.groupby(\"playlist_name\")\n#grouping by playlist name\nplaylists.groups.keys()\n#this returns all of the playlist names\n\n#len(playlists)\n  #this tells us there are 2184 playlists (we could tell this from nunique() earlier)\n\ndict_keys(['!Party', '#Relaxed', '#Workout', '#boostyourrun', '#chill', '#mood', '#tb', '#tbt', '( r e l a x )', '( ͡° ͜ʖ ͡°)', '((chris))', '(Guilty)', '*** good stuff', '*ant', '*feels*', '------', '...chill_out...', '...mind', '.15', '.::March::.', '.jams.', '// Drive', '//Pretty Little Liars//', '//new', '/chill', '000', '00s', '100', '11', '13.1', '14', '16', '1967', \"1980's\", \"1990's\", \"2000's\", '2000s', '2000s hits', '2000s r&b', '2009', '2012', '2013', '2014', '2015', '2015 Top Tracks', '2016', '2016 MIX', '2017', '2017 Summer', '2017 spring', '2020', '21st Birthday!!!!', '22', '2K14', '2k', '2k17', '2pac', '3am', '4/20', '40th', '4AM', '4th of july', '50s/60s', '5K', '60s', \"70's\", '70/80', '70s', \"80's\", '80s', '80s Pop', '80s jams', '80s music', \"90's\", \"90's Hits\", \"90's Jams\", \"90's R&B\", \"90's country\", \"90's music\", '90s', '90s Rock', '90s alternative', '90s baby', '90s hip hop', '90s hits', '&lt;3', '&lt;333', 'A Perfect Circle', 'AA', 'AAA', 'ACL', 'AHS', 'ALT', 'AM', \"APRIL '17\", 'ATL', 'Aaliyah', 'About Time', 'Accapella', 'Acoustic', 'Acoustics', 'Actual', 'Adoracion', 'Adventure Of A Lifetime', 'Afrikaans', 'Afrobeats', 'Afterparty', 'Alex', 'Alexia', 'All Country', 'All Good', 'All That Jazz', 'All the songs', 'All-Time Favorites', 'Alright', 'Alt', 'Alt Jams', 'Alternative', 'Alternative Mix', 'Alternative Rock', 'Alternative/Rock', 'Alternativo', 'Amber', 'America', 'Amy', 'Another', 'Antidote', 'April', 'April 2016', 'Arab', 'Ash', 'Ashley', 'Atlas', 'Audiobooks', 'August', 'Australia Day', 'Autumn 2017', 'Autumn Playlist', 'Autumnal', 'Aux', 'Awake', 'Awesome', 'Awesome Mix', 'Awesome Playlist', 'Awesome Sauce', 'Awesome mix vol. 1', 'Ayy', 'BANGAZ', 'BANGERZ', 'BBG', 'BBQ', 'BEAST MODE', 'BEST OF DISNEY', 'BEST SONGS EVER', 'BG', 'BK', 'BLAST from the PAST', 'BLUE', 'BOMB', 'BOOMIN', 'BOP', 'BSO', 'BUMP', 'BUST A MOVE', 'BW', 'Baby Driver', 'Baby Making', 'Baby Making Music', \"Baby makin'\", 'Baby shower', 'Bachata', 'Back in the day', 'Back to School', 'Bad and Boujee', 'Baes', 'Bailando', 'Baking', 'Ballads', 'Band Music', 'Banda', 'Bang Bang', 'Bang bang', 'Bangers', 'Bangerz', 'Banjo', 'Baseball', 'Basement', 'Bass.', 'Bassnectar', 'Bbq', 'Be Mine', 'Beach', 'Beach Music', 'Beach songs', 'Beachin', 'Bear', 'Beatles', 'Beats', 'Beautiful Things', 'Bed time', 'Belters', 'Best', 'Best EDM', 'Best Songs of 2016', 'Best mix', 'Best of 2016', 'Best songs', 'Bet', 'Bhangra', 'Birthday', 'Birthday Bash', 'Black', 'Black Beatles', 'Black Coffee', 'Black beats', 'Blackout', 'Blues', 'Blues Rock', 'Bo', 'Bonfire!!', 'Booty', 'Bossa Nova', 'Brandon', 'Brasileiras', 'Brazil', 'Break', 'Breakfast', 'Breaking Benjamin', 'Breakup Songs', 'Breezeblocks', 'Breezy', 'Brian', 'British Invasion', 'Britney', 'Britt', 'Broadway', 'Broadway Baby', 'Brown Eyed Girl', 'Bruno Mars', 'Bubbles', 'Buena Vista Social Club', 'Bug', 'Bump', \"Bumpin'\", 'Bus playlist', 'Bus ride', 'CARDIO', 'CD', 'CD1', 'CHANCE', 'CHILE', 'CHRISTMAS', 'CHRISTMAS MUSIC', 'CHRISTMASSSSS', 'CHiLl', 'CLASSICS', 'COUNTRY', 'CR', 'CUMBIAS', 'Cali', 'Calm', 'Calming Music', 'Calming songs', 'Calvin Harris', 'Camp', 'Camping', \"Can't Get Enough\", 'Canada', 'Canciones', 'Cancun', 'Car Party', 'Car Rides', 'Car mix', 'Cash', 'Catchy Songs', 'Ccm', 'Ceremony', 'Ceremony Music', 'Cha Cha', 'Chance', 'Chantaje', 'Check it out!', 'Chidas', 'Childhood Jams', 'Chill', 'Chill Alternative', 'Chill Music', 'Chill Out', 'Chill Out Music', 'Chill Rock', 'Chill Sesh', 'Chill Songs', 'Chill Vibes', 'Chill Worship', 'Chill Zone', 'Chill list', 'Chill music', 'Chill rap', 'Chillin', 'Chillout', 'Chills', 'Chilly', 'Chinese Songs', 'Chris', 'Christian', 'Christian Music', 'Christian Playlist', 'Christian Songs', 'Christian music', 'Christian songs', 'Christmas', 'Christmas 2016', 'Christmas :)', 'Christmas Favorites', 'Christmas Mix', 'Christmas Music', 'Christmas Party', 'Christmas Time', 'Christmas music', 'Christmas songs', 'Christmastime', 'Cinco De Mayo', 'Cinderella', 'Class', 'Classic', 'Classic Country', 'Classic Hip-Hop', 'Classic Music', 'Classic Rock', 'Classic country', 'Classical', 'Classical Study Music – Classical Study Music', 'Classical favorites', 'Classics', 'Closer', 'Cloudy Days', 'Club', 'Clubbin', 'Coachella 2017', 'Cocktail Hour', 'Cody', 'Coke Studio', 'Collaboration', 'Comedy', 'Congratulations', 'Cool Covers', 'Cool covers', 'Corridos', 'Corridos alterados', 'Counting Crows', 'Country', 'Country 1', 'Country Favorites', 'Country Lovin', 'Country Mix', 'Country Roads', 'Country Vibes', 'Country favorites', 'Country mix', 'Country summer', 'County', 'Covers', 'Crossfit', 'Cruisin', 'Cruising', 'Cruzin', 'Cumbias', 'Current', 'Current Mood', 'Current Rotation', 'Current jams', 'Currently', 'DA', 'DANCE', 'DC', 'DIEGO$', 'DISCOVER', 'DUB', 'Dad Rock', 'Dad!', 'Daddy Issues', 'Dance', 'Dance Club', 'Dance Dance', 'Dance mix', 'Dancehall', 'Dancing on my own', 'Dancy', 'Dark Side', 'Darty', 'Dat new new', 'Dave', 'David', 'Daze', 'Deb', 'December', 'December 2016', 'Deep Thoughts', 'Demons', 'Desperado', 'Dinner Party', 'Discover', 'Discovered', 'Disney', 'Disney Jams', 'Disney!', 'Disneyland', 'Dixie', 'Do I Wanna Know?', \"Don't\", \"Don't Let Me Down\", 'Dope', 'Dope Beats', 'Download', 'Drake', 'Drank', 'Dreams', 'Drinking music', 'Drive', 'Drive Time', 'Driving', 'Drugs', 'Dubstep', 'Duetos', 'Dusk', 'EBM', 'EDC', 'EDEN', 'EDM', 'EDM 2015', 'ELECTRONICAS', 'ENO', 'Ear Candy', 'Easy Listening', 'Edge', 'Edgy', 'Edward Sharpe & The Magnetic Zeros', 'Ehh', 'Electric', 'Electric Light Orchestra', 'Electric Love', 'Electro', 'Electro Chill', 'Electro Swing', 'Electronic', 'Electronic Music', 'Eli', 'Elisa', 'Elizabeth', 'Ellie', 'Elliot', 'Elliott', 'Elvis', 'Eminem', 'Emo', 'Emotional', 'End of Summer', 'Energize', 'English', 'Epic', 'Espanol', 'Everyday', 'Everything', 'Exercise', 'FALL 2013', 'FBGM', 'FF', 'FIREFLY 2016', 'FIRE🔥🔥🔥', 'FNAF', 'FOR EMMA', 'FUN', 'Fall', 'Fall 16', 'Fall 2014', 'Fall 2015', 'Fall 2016', 'Fall 2017', 'Fall Playlist', 'Fallout', 'Favorite Country', 'Favorite Songs', 'Favorite songs', 'Feel Good', 'Feel Good Friday', 'Feel Good Oldies', 'Feel Good Songs', 'Feel good', \"Feelin' Myself\", 'Feeling Good', 'Feeling myself', 'Feels', 'Female Singers', 'Female Vocals', 'Fiesta', 'Finesse', 'Fire', 'Firestone', 'Fix You', 'Flame', 'Flashback', 'Flawless', 'Florence + The Machine', 'Florida', 'Focus', 'Folk', 'For Megan', 'For You', 'For the Road', 'For the Soul', 'Französisch', 'French', 'Fresh', 'Friday :)', 'Friday afternoon...', 'From me to you', 'Frozen', 'Fun', 'Fun Mix', 'Fun mix', 'Funeral', 'Funky', 'GB', 'GET DOWN', 'GET PUMPED!!', 'GG', 'GOOD MUSIC', 'GOOD VIBES', 'GRAD', 'GUACAMOLE', 'GUILTY PLEASURES', 'Gabriel', 'Game Time', 'Game day', 'Gaming', 'Garage', 'Garage Rock', 'Gates', 'Get It', 'Get It!', 'Get Psyched Mix', 'Get pumped', 'Gina', 'Girl Power', 'Girls', 'Glee Cast', 'Go To', 'Go to', 'Gold Digger', 'Goo Goo Dolls', 'Good Beats', 'Good Country', 'Good Day', 'Good Music', 'Good Ole Country', 'Good Stuff', 'Good Times', 'Good Vibes', 'Good music', 'Good oldies', 'Good songs', 'Good stuff', 'Goodies', 'Gospel', 'Gospel Mix', 'Gracie', 'Grad party', 'Grandes', 'Greatest Hits', \"Grey's Anatomy\", 'Grind', 'Groove', 'Groovy', 'Guilty pleasure', 'Gym', 'Gym Mix', 'Gym Time', 'H2O', 'HALLOWEEN', 'HAPPY PLAYLIST', 'HARDCORE WORKOUT', 'HER', 'HIPHoP!', 'HITS', 'HOOD', 'HS', 'HSM', 'HYPE', 'HYPEBEAST', 'Halloween', 'Hang Out', 'Happiness', 'Happy', 'Happy :)', 'Happy Chill', 'Happy Christmas!', 'Happy Day', 'Happy Happy Happy', 'Happy Hardcore Top 100', 'Happy list', 'Happy mix', 'Hard Times', 'Hardcore', 'Harvest Moon', 'Hawaii', 'Heart Of Gold', 'Heart Strings', 'Heat', 'Heather', 'Heavy Metal', 'Helene', 'Help.', 'High', 'Hindi', 'Hip Hop/ R&B', 'Hip hop', 'Hip-Hop', \"Hips Don't Lie\", 'Hits', 'Hockey', 'Holiday Music!', 'Holiday Party', 'Homesick', 'Homework', 'Hood', 'Hotel California', 'House', 'House Warming', 'Huapangos', 'Hungover', 'Hype', 'Hyper', 'Hyphy', 'I Put A Spell On You', 'I guess.', 'I like these songs', 'I love You', 'I workout!', \"I'm sorry\", 'IDGAF', 'II', 'INDIE', 'INDY', 'Ibiza 2017', 'Idk', 'Iii', 'Imagine Dragons', 'In The Car', 'In the Name of Love', 'Indie', 'Indie Chill', 'Indie Electro', 'Indie Mix', 'Indie Stuff', 'Inside Out: So Emotional', 'Inspiration', 'Inspire', 'Instrumental', 'Intense', 'Intimate', 'Into You', 'Intro', 'Isis', 'Island Time', 'Island Vibes', \"It's Christmas Time!\", 'Italy', 'Its a Trap', 'J Cole', \"J'Adore\", 'JAMS', 'JAZZ', 'JESUS', 'JOY', 'JP', 'JUNE', 'Jam', 'Jam Songs', 'Jamie', 'Jammers', 'Jammin', \"Jammin'\", 'Jams', 'Jamz', 'January 2016', 'Jazz', 'Jazz Mix', 'Jazzy', 'Jesse', 'Jesus music', \"John's Playlist\", 'Juli', 'Julion alvarez', 'July 2013', 'July 2017', 'July17', 'June', 'June 16', 'June 2014', \"Just Chillin'\", 'Justin', 'K pop', 'KAT', 'KIDZ', 'KILLA', 'KPOP', 'Kai', 'Karen', 'Kendall', 'Kendrick Lamar', 'Kevin', 'Kickball', 'Kickin it', \"Kickin' it\", 'Kid', 'Kid Cudi', 'Kids Playlist', 'Kill It!', \"Killin' It\", 'Kings', 'Klance', 'Kodak Black', 'Korean', 'Kpoop', 'Kpop', 'Kyle', 'L O V E', 'L$D', 'L.o.v.e', 'L1', 'LANY', 'LIT', 'LIT 🔥', 'LIT!!!!!!!', 'LITT', 'LM', 'LOCO', 'LONDON!!!', 'LUV', 'Ladies', 'Lady Jams', 'Lake', 'Las Buenas', 'Late', 'Latin', 'Latin Mix', 'Latin Trap', 'Latin Vibes', 'Latino', 'Legendary', 'Lent', 'Les Mis', 'Lets Dance !!!', 'Life', 'Lifting', 'Light', 'Lindsey Stirling', 'Line Dances', 'Linus', 'Listen', 'Lit', 'Lit AF', 'Lit af', 'Lit songs', 'Lithium', 'Littt', 'Litty', 'Lit🔥🔥', 'Local', 'Lollapalooza 2016', 'Long Car Rides', 'Lounging', 'Love', 'Love Music', 'Love On The Brain', 'Love love', 'Lu', 'Luke', 'Lulu', 'Lust', 'MDW', 'MEDITATION', 'MERICA', 'MH', 'MUSIC', 'MVP', 'MY FAV', 'MY STUFF ;)', 'Ma', 'Machine gun kelly', 'Mad', 'Mad Men', 'Madness', 'Main', 'Main Playlist', 'Marathon', 'March', 'March 2015', 'Marijuana', 'Marshall', 'Mashup', 'Matthew', 'Maui', 'May', \"May '17\", 'May 2015', 'May 2016', 'May Day', 'Me', 'Me Like', 'Mega Chill', 'Megan', 'Meh', 'Mellow', 'Mellow Fellow', 'Mellow.', 'Melting Pot', 'Memories', 'Memory Lane', 'Meow', 'Merengue', 'Metal', 'Metal rock', 'Mexico', 'Mia', 'Michelle', 'Mine', 'Misc', 'Mix Tape', 'Mixed', 'Mixtape', 'Modern Music', 'Modern music', 'Mom', \"Mom's playlist\", 'Mondays', 'Moo', 'Mood', 'Mood.', 'More Songs', 'Morning', 'Move', 'Movie Soundtracks', 'Movie music', 'Movie soundtracks', 'Mr. Brightside', 'Mum', 'Mumford & Sons', 'Music', \"Music From Baz Luhrmann's Film The Great Gatsby\", 'Music.', 'Musica', 'Musica en español', 'Musical', 'Musicales', 'Musicals', 'Musik', 'My Favorites', 'My Heart', 'My High-Intensity Workout', 'My Hits', 'My Jams', 'My List', 'My Music', 'My Musics', 'My baby', 'My favorites', 'My favs', 'My happy place', 'My hits', 'My music', 'My stuff', 'Mya', 'NB', 'NC', 'NEW', 'NEW YEARS', 'NICOLE', 'NKOTB', 'NYE', 'Narcos', 'Nate', 'Neat', 'Neo', 'New', 'New 2', 'New Beginning.', 'New Finds', 'New Loves', 'New Music', 'New Playlist 4', 'New Rap', 'New School', 'New Songs', 'New Things', 'New Tunes', 'New Wave', 'New Years', 'New ish', 'New jams', 'New list', 'New music', 'New songs', 'New stuff', 'New year', 'New years', 'New2', 'NewNew', 'Newer stuff', 'Nice', 'Nico', 'No Limit', 'Noosa Tastiest Playlist', 'Norteñas', 'Not Rap', 'Nov 2017', 'Novedades', 'November 2016', 'Now', 'OD', 'ODESZA', 'OLD SKOOL', 'OOOUUU', 'Obsessions', 'October', 'October 2015', 'October 2017', 'Odd Future', 'Office', 'Offline', 'Oh Yeah!', 'Old', 'Old Country', 'Old Jams', 'Old Rock', 'Old School', 'Old School R&B', 'Old School Vibes', 'Old Soul', 'Old music', 'Old school', 'Old songs', 'Oldies', 'Oldies But Goodies', 'Oldies but goodies', 'On My Mind', 'On the Run', 'Other Stuff', 'Others', 'Otoño', 'PAAARTY!', 'PARTAY', 'PARTY', 'PARTY 1', 'PARTY PEOPLE', 'PARTY PLAYLIST', 'PM', 'POP', 'POST', 'PREGAME', 'PS', 'PT', 'PUMPED', 'PURPLE', 'Padre', 'Paige', 'Paint', 'Painting', 'Paisa', 'Panda', 'Panic! At The Disco', 'Par-Tay!', 'Paradise', 'Part 1', 'Partay', 'Party', 'Party Country', 'Party Hardy', 'Party Mix', 'Party Playlist', 'Party Rock!!', 'Party Tunes', 'Party list', 'Party mix', 'Party time', 'Partyyyyyy', 'Paty', 'Peace', 'Peace Out', 'Pearl Jam', 'Personal Favorites', 'Phone', 'Piano', 'Piano Guys', 'Piano Music', 'Pilates', 'Pitbull', 'Pitch Perfect', 'Play it Forward', 'Play this at my funeral', 'PlayStation', 'Playlist', 'Playlist 7', 'Playlist name', 'Poker', 'Pole', 'Pool', 'Pool Party', 'Pop', 'Pop Hits', 'Pop en español', 'Pop songs', 'Pop/Chill', 'Practice', 'Praise', 'Praise Him', 'Prayer', 'Pregame', 'Pump', 'Pump It', 'Pump up', 'Pump up songs', 'Punk', 'Q2', 'Quirky', 'R & B', 'R&B', 'R&B classics', 'R&b', 'RANDOM FAVORITES', 'RAP', 'RAVE', 'RECENT', 'REPEAT', 'ROADTRIP', 'ROAR', 'ROCK🎸', 'RUNNIN', 'Rage', 'Rainy Dayz', 'Rancheras', 'Rando', 'Random', 'Random Tunes', 'Random!', 'Rap', 'Rap / hip hop', 'Rap Classics', 'Rap Jams', 'Rap Songs', 'Rap it up', 'Rap/Pop', 'Rap/hiphop', 'Rave', 'Real Rap', 'Recents', 'Reception', 'Reception!!', 'Red Bull Editions Coachella Playlist', 'Red Dirt', 'Regeton', 'Reggae', 'Reggae/Ska', 'Reggaeton', 'Reggeton', 'Relax', 'Relaxing', 'Relaxing Music', 'Remixes', 'Rent', 'Restore', 'Ride', 'RnB', 'Road', 'Road Music', 'Road Trip', 'Road Trip Mix', \"Road Trippin'\", 'Roadtrip', 'Rob', 'Rock', 'Rock alternativo', 'Rock en español', 'Rock jams', 'Rock mix', 'Rock music', 'Rock.....', 'Rock/Alt', 'Rolex', 'Rosa', 'Route 66', 'Run', 'Run Faster', 'Run Run Run', 'Run!!', 'Runaway', 'Running', 'Running 2', 'Running 2.0', 'Russ', 'Ry', 'SARAH', 'SB', 'SENIOR YEAR', \"SEPTEMBER '17\", 'SEPTEMBER 2017', 'SEX', 'SEX PLAYLIST', 'SLO', 'SPN', 'SPRANG', 'SPRING!', 'STUDY', 'SUMMER 2k17', 'SWAG', 'Sabina', 'Sad', 'Sad Songs', 'Sad songs', 'Sadness', 'Salsa', 'Salsa clasica', 'Sam', 'Samba', 'Same', 'Sara', 'Saturday', 'Saturn', 'Say My Name', \"Say You Won't Let Go\", 'Seduction', 'Sept 2016', 'September', 'September 2016', 'Sex', 'Sexual', 'Sexy', 'Shaky Knees', 'Shape of You', 'She Will Be Loved', 'Shleep', 'Shower', 'Shower Songs', 'Shower mix', 'Shower songs', 'Shredding', 'SiNgInG sOnGs', 'Sierreño', 'Silence', 'Ska', 'Ski', 'Skrt', 'Slapz', 'Slay', 'Sleep', 'Sleep Music', 'Sleepy', 'Sleep~', 'Slow', 'Slow Dance', 'Slow Jams', 'Slow Jamz', 'Slow Songs', 'Slow Stuff', 'Slow jams', 'Slow jamz', 'Smh', 'Smooth', 'Smooth Beats', 'Smooth Jazz', 'Snowboarding', 'Soft', 'Solid', 'Solitude', 'Somber', 'Songs I Like', 'Songs I Love', 'Songs that never fail to make white people beyond turnt', 'Songs to sing to', 'Sony VAIO - Back to School', \"Sophie's Playlist\", 'Sorry', 'Soul', 'Soul/Blues', 'Soulful', 'Soundtrack', 'Soundtracks', 'Southern Rock', 'SpRiNg BrEaK', 'Spanish', 'Spanish Music', 'Spanish Playlist', 'Spanish Rock', 'Spanish Vibes', 'Spanish songs', 'Spooky!', 'Spotify.Me', 'Spring', \"Spring '16\", 'Spring 2012', 'Spring 2015', 'Spring 2016', 'Spring Break', 'Spring16', 'Squad', 'Star Wars', 'Stay awake', 'Steph', 'Straight Fire', 'Straight Up', 'Study', 'Studying', 'Stuff', 'Stuff I like', 'Sugar', 'Suicide Squad', 'Summa', 'Summer', \"Summer '16\", 'Summer 14', 'Summer 15', 'Summer 17', 'Summer 2013', 'Summer 2014', 'Summer 2015', 'Summer 2016', 'Summer 2017', 'Summer 2K17', 'Summer Camp', 'Summer Chill', 'Summer Country', 'Summer Mix', 'Summer Party', 'Summer Playlist', 'Summer Workout', 'Summer country', 'Summer drives', 'Summer of Love', 'Summer of love', 'Summer playlist', 'Summer17', 'Summertime', 'Sunday', 'Sundays', 'Sunny', 'Sunny Days', 'Sunrise', 'Super chill', 'Surf', 'Svenskt', 'Swang', 'Sweat.It.Out.', 'Swing', 'TBT', 'THE Days', 'THE MIX', 'THE Playlist', 'THEATER', 'THROWBACKS :)', 'TOP', 'TRAP', 'TRIPPIn', 'TURNUP', 'TX', 'TX Country', 'T^T', 'Take Me Back', 'Take it Easy', 'Tame Impala', 'Tangled', 'Taylor', 'Taylor swift', 'Teen Angst', 'Teen Wolf', 'Tegan and Sara', 'Tejano', 'Tennessee', 'Texas Country', 'Texas Forever', 'That', 'That New New', 'The Best', 'The Cave', 'The Classics', 'The Drive', 'The Game', 'The Glitch Mob', 'The Good Stuff', 'The Greatest', 'The Ladies', 'The Mix', 'The PLayliSt', 'The Piano Guys', 'The Wave', 'The good stuff', 'Thinking', 'This', 'This Is What You Came For', 'Those days', 'ThrowBack Pop', 'Throwback', 'Throwback Thursday', 'Throwback playlist', 'Throwbackkkk', 'Throwbacks', 'Thug', 'Thuggin', 'Tierra caliente', 'Together', 'Tom', 'Tom Petty', 'Too Good', 'Top Hits', 'Top hits', 'Trance', 'Trap', 'Trap!', 'Traps', 'Traveling', 'TriP hOp', 'Trip', 'Tripping', 'Tropical', 'Tropicales', 'Try Me', 'Tune$', 'Tunes', 'TurnUp', 'Turnt', 'Twenty One Pilots', 'Twenty One Pilots — Heathens', 'Twenty one pilots', 'Two', 'Tú', 'Türkçe Slow', 'UNICORNS!!!', 'Ukulele', 'Up', 'Up Beat', 'Upbeat Country', 'Upbeat Songs', 'Urbano', 'VACATION', 'VIBE', 'VIRGINIA!!', 'VOODOO', 'Vallenato', 'Vampire Weekend', 'Various Artists – Majestic Casual - Chapter I', 'Vermont', 'Viaje', 'Vibe', 'Vibes', 'Vibez', 'Vibin', \"Vibin'\", 'Vinyasa', 'Volleyball', 'W O R K O U T', 'WIP', 'WM', 'WORK', 'WORKOUT', 'WORKOUT 2', 'WORKOUT!!', 'WORSHIP', 'WS', 'WaVeS', 'Wake Up', 'Walk Up Songs', 'Walking on Sunshine', 'Waltz', 'Wandering', 'Wanderlust', 'Warm Weather', 'Warmup', 'Warped Tour 2017', 'Wave', 'Waves', 'Way Back When', 'Way Up', 'Wedding', 'Wedding Cocktail Hour', 'Wedding Dance Music', 'Wedding Dance Party', 'Wedding Dinner Music', 'Wedding Playlist', 'Wedding Songs', 'Weekend', 'Weekly', 'Weird', 'Werk', 'Wes Anderson', 'West Coast Swing', 'Wet Dreamz', 'Whisky', 'Willie', 'Willie Nelson', 'Winter', 'Winter 2014', 'Winter 2016', 'Witchcraft', 'Work', 'Work Music', 'Work Out', 'Work in progress', 'Work list', \"Workin'\", 'Working', 'Working Out', 'Workout', 'Workout music', 'Workout!', 'Workout2', 'Worship', 'Worship Music', 'Worship songs', 'Writing Playlist', 'XOXO', 'XXXMas', 'Xmas', 'YEET', 'YES', 'YOU', 'Yacht Rock', 'Yas', 'Yeah', 'Yeet', 'Yellow', 'Yellow Claw', 'Yes', 'Yoga', 'You already know', 'You and me', 'You&Me', 'Young Dumb & Broke', 'Youtubers', 'Yuridia', 'Zombies', 'Zoned', 'Zumba', 'Zzzzzzzz......', 'a good playlist', 'a playlist', 'abby', 'acoustic', 'ahh', 'airplane mode', 'ale', 'alex', 'alexa', 'alive', 'all songs', 'alt', 'always', 'angst', 'arizona', 'art class', 'ashley', 'atmosphere', 'audi', 'august 2015', 'aye', 'bachata', 'back to school', 'background noise', 'bae', 'bailamos', 'ballads', 'baller', 'band songs', 'bang bang.', 'basic', 'bb', 'beach', 'beachy', 'beats', 'beautiful', 'bed time', 'bedroom', 'before my time', 'believe', 'best', 'best christmas', 'best songs', 'billy', 'bird', 'blue grass', 'bluegrass', 'boa', 'boat', 'boi', 'bomb', 'booze cruise', 'bops', 'bored', 'boris', 'boujee', 'bounce', 'brad paisley', 'breathe', 'bridal shower', 'broadway', 'bruh', 'bruno mars', 'bsb', 'bump', 'bumpin', 'bumps', 'cake', 'california', 'calm', 'cameron', 'camp', 'can i kick it?', 'car', 'car jamz', 'car playlist', 'car ride', 'car rides', 'car tunes', 'carpe diem', 'carride', 'cd', 'charlie', 'cheese', 'childhood', 'chill', 'chill beats', 'chill edm', 'chill jams', 'chill out', 'chill songs', 'chill time', 'chill vibes', 'chillen', 'chillin', 'chillin like a villain', 'chilll', 'chilllllllll', 'chillout', 'chinese', 'christian', 'christian.', 'christmas', 'christmas music', 'church songs', 'cinematic', 'classic', 'classic rock', 'classic.', 'classical', 'classico', 'classics', 'cleaning', 'club', 'coachella', 'cocktail hour', 'coffee', 'cole', 'college', 'cool', 'cool beans', 'cool songs', 'country', 'country 2017', 'country favorites', 'country favs', 'crooners', 'crunk', 'cumbia', 'current', 'currently', 'da best', 'dad', 'dad jams', 'dad songs', 'dads', 'dads playlist', 'daily mix', 'damn', 'dance', 'dance it out', 'dance yrself clean', 'dank memes', 'dat new new', 'day to day', 'death', 'december', 'deep', 'different', 'dinner playlist', 'discovered', 'disney', 'disney bops', 'div', 'doo wop', 'down in the dumps', 'drank', 'driving music', 'dubstep', \"early 2000's\", 'ease ~', 'eclipse', 'eh', 'electro', 'electronic', 'elevator music', 'emo', 'emo af', 'empty', 'english', 'ep', 'erika', 'erin', 'escape', 'escuela', 'essentials', 'eurotrip', 'everything', 'explicit', 'explore', 'f a l l', 'fall', \"fall '17\", 'fall 15', 'fall 2015', 'fall 2016', 'fall 2017', 'fallen', 'family', 'fav rap :)', 'fave', 'favorite worship', 'favs rn', \"february '17\", 'feel good', 'feel good music.', 'feelings', 'feels', 'feelz', 'fifty shades darker', 'fire', 'fireside', 'flow', 'folk yeah', 'folky', 'for you', 'frenchy', 'fuego', 'fun', 'funk', 'funky', 'gabrielle', 'game time', 'get down', 'getting ready', 'ghana', 'ghetto', 'go to', 'go-to', 'golden', 'goldie', 'good', 'good good', 'good music', 'good music :)', 'good stuff', 'good times', 'good vibes', 'goodvibes', 'gopro', 'greek', 'grindin', 'groovy', 'guilty', 'guilty pleasure', 'guitar.', 'gym', 'gym list', 'ha', 'halcyon', 'halloweenie', 'happy', 'happy chill', 'hawaii', 'hayley', 'headphones', 'heaven', 'heavy', 'hehe', 'hey', 'hick', 'high', 'high school', 'hip hop', 'hitS', 'hits', 'hmm', 'hmmm', 'hoco', 'hoe anthems', 'holiday cheer', 'house', 'housewarming', 'howdy', 'hsm', 'humble.', 'hw', 'hyfr', 'hype', 'idek', 'idk man', 'idk yet', 'iii', 'im', 'in my feels', 'indie rock', 'inspiring', 'international', 'irish', 'issa playlist', 'its lit', 'jack & jack', 'jammin', 'jams', 'jamz', 'jamzzz', 'jan 2015', 'january 17', 'jazzy', 'jeep', 'jens', 'jessie', 'jesus jams', 'jewel', 'jm', 'joSe :)', 'joshua tree', 'juicy', 'julie', 'july', 'july 2016', 'june', 'june 2017', 'just chillin', 'justin', 'karaoke.', 'kareoke', 'kayla', 'kids songs', 'killin it', 'kitchen', 'korean', 'kpop', 'l o v e', 'lake', 'latin', 'latin mix', 'latino', 'lean', 'leggo', 'lib', 'lift', 'like', 'lit', 'lit songs', 'litty', 'litty!', 'lit🔥', 'love', 'love love love', 'loveee', 'lovelovelove', 'lowkey', 'lsd', 'lu', 'maY!', 'madison', 'main playlist', 'mar', \"march '17\", 'mat', 'mayer', 'mb', 'meditate', 'meh', 'melancholy', 'mello', 'mellow', 'melodies', 'memes', 'merp', 'metalcore', 'mhm', 'migos', 'miley', 'mine', 'misc.', 'mix', 'mix 1', 'mixtape', 'mixx', 'mmm', 'mmm.', 'mmmm//', 'modern rock', 'mom!', 'montage', 'mood', 'mood music', \"mornin'\", 'morning', 'morning.', 'most wonderful time of the year', 'motivation', 'motivational', 'motown', 'mumford', 'music', 'musica', 'musicals', 'muzic', 'my', 'my country', 'my favorite songs', 'my heart', 'my songs', 'nashville', 'nc', 'neo soul', 'new', 'new alt', 'new beginnings.', 'new new', 'new new new !', 'new stuff', 'nice and easy', 'nick.', 'nite', 'no', 'no lyrics', 'nostalgia', 'nostalgic', 'now', 'number one', 'ol skool', 'old', 'old bops', 'old but good', 'old country', 'old jams', 'old people', 'old school', 'old school hip hop', 'old songs', 'old soul', 'old stuff', 'older songs', 'oldies', 'oldies but goodies', 'oldiess', 'oof', 'other', 'ouch', 'outside', 'papa', 'para bailar', 'partay', 'party', 'party 2', 'party music', 'party people', 'party playlist', 'party?', 'peter', 'petrichor', 'pg', 'picks', 'playlist', 'pole', 'poop', 'pop', 'pop favorites', 'post rock', 'pow pow', 'pr', 'pregame', 'pump', 'pump up', 'pumped', 'punk', 'quality', 'queen', 'queue', 'quiet', 'quiet time', 'quinn', 'rad', 'rage', 'random', 'random songs', 'randoms', 'rap', 'rap 1', 'rap god', 'rap mix', 'rap playlist', 'rap stuff', 'rap stuff.', 'rap workout', 'rapp', 'ratchet', 'raw', 'rawr', 'real talk', 'recommendations !!', 'recovery', 'regaton', 'reggae', 'reggaeton', 'relax', 'relaxation', 'relaxed', 'remix', 'ride', 'riding music', 'riley', 'rnb_hiphop', 'road trip', 'road trip:)', 'roadtrip', 'roadtrip 🚗', 'roadtrippin', 'rock', 'rock songs', 'roma', 'roman', 'roots', 'run', 'run 2', 'run it', 'running', 'running 3', 's o u l', 'sad', 'sad :(', 'sad boi', 'sad song', 'sad times', 'saturday morning', 'savage', 'sb2k17', 'schleep', 'scott', 'september', 'september 17', 'serenity', 'session', 'setlist', 'settle down', 'sex', 'sexy time', 'shower', 'shut up and dance', 'sia', 'sick tunes', 'siesta', 'singalongs', 'sj', 'skrt skrt', 'sleep', 'sleep.', 'sleeps', 'sleepy head', 'sleepytime', 'slow', 'slow hands', 'slowmotion', 'smh', 'smiles :)', 'smooth', 'smooth jams', 'snowboarding', 'soft', 'songs i like', 'songs that make me think of you', 'songs to dance to', 'songs to sing in the shower', 'songs to sing to', 'songssss', 'soul', 'soul train', 'sound', 'sound of silence', 'southern rock', 'space jams', 'spanish', 'spanish jams', 'spanish playlist', 'spin', 'spotify and chill', \"spring '17\", 'spring 16', 'spring 17', 'spring/summer 2017', 'stay woke', 'storm', 'stream', 'study', 'study time', 'study!', 'studying music', 'stuff', 'sum17', 'summa', 'summa summa', 'summah', 'summer', \"summer '17\", 'summer 15', 'summer 16', \"summer 16'\", 'summer 17', 'summer 2015', 'summer 2016', 'summer 2017', 'summer 2k17', 'summer country', 'summer music', 'summer playlist', 'summer sixteen', 'summer tunes', 'summer16', 'sunday', 'sunset', 'superman.', 'sweet dreams', 'tURNuP', 'tailgate', 'take me back', 'taylor swift', 'tb', 'tbd', 'tbt', 'tears.', 'teenage angst', 'thai', 'that good good', 'the feels', 'the goods', 'the mix', 'the office', 'this', 'thoughts', 'three', 'throw backs', 'throwback', 'throwback hits', 'throwbackk', 'throwbacks', 'throwbacksss', 'timeless.', 'today', 'tom', 'top 15', 'top down', 'trap', 'trap house', 'trap rap', 'trending', 'trill', 'tuneZ', 'turn up', 'twenty sixteen', 'uhhhh', 'unknown', 'upbeat', 'us', 'vampire weekend', 'vaporwave', 'vibe', 'vibes', 'vibin', \"vibin'\", 'vibrations', 'volleyball playlist', 'vroom', 'w o r k o u t', 'wake up', 'warming up', 'warrior', 'washed out', 'wedding', 'wedding playlist', 'wedding songs', 'weekend', 'weeknd', 'wes', 'whatever', 'white girl music', 'will', 'william', 'winter', \"winter '17\", 'winter 2015', 'woo', 'woohoo', 'work', 'work music', 'work out', 'workout', 'workout 2', 'workout jamz', 'workout mix', 'worship', 'worship songs', 'wow', 'wrap', 'wrk', 'xXx', 'xmas party', 'xx', 'ya', 'yaaas', 'yas', 'yay', 'ye', 'yea', 'yee', 'yee haw.', 'yeet', 'yep', 'yes', 'yo', 'yoga', 'yoo', 'young folks', 'youtubers', 'yuh', '~Rando~', '☀️', '☀️☀️☀️', '☁️☁️☁️', '♡♡♡', '♥️', '⚡️', '⚡️⚡️⚡️', '⚽️', '✔️', '✝️', '❄️', '❌❌❌', '❤❤❤', '❤️', '����������', '🇲🇽🇲🇽🇲🇽', '🌈🌈🌈', '🎵🎵', '👌👌👌', '👑👑👑', '💁🏼', '💃🏽', '💗💗💗', '💛💛', '💦💦💦', '💯💯💯', '💸💸', '🔥🔥', '🔥🔥🔥', '🔥🔥🔥🔥', '🖕🏻', '😈😈😈', '😍❤️', '😍😍', '😍😍😍', '😏😏😏', '😭😭', '😴😴', '😻😻', '🙏🏾', '🚗💨', '🤘🏼', '🤤🤤'])"
  },
  {
    "objectID": "posts/welcome/index.html#altering-and-sorting",
    "href": "posts/welcome/index.html#altering-and-sorting",
    "title": "Analyzing Spotify Dataframe",
    "section": "Altering and Sorting",
    "text": "Altering and Sorting\nWe can add new variables by transforming existing variables. Additionally, we can sort our data with sort_values()\n\nspotify[\"duration_min\"] = spotify['duration_ms']/60000\nlength = spotify.sort_values('duration_min', ascending = False)\n#this sorts the songs by duration in minutes in descending order"
  },
  {
    "objectID": "posts/welcome/index.html#setting-an-index-and-dropping-observations",
    "href": "posts/welcome/index.html#setting-an-index-and-dropping-observations",
    "title": "Analyzing Spotify Dataframe",
    "section": "Setting an Index and Dropping Observations",
    "text": "Setting an Index and Dropping Observations\nFrom before, we can see that the highest duration “songs” are all in the playlist Audiobooks. Since I would like to see what else has a high duration, I can set the playlist name as the index and drop the Audiobooks playlist from my DataFrame.\n\nno_audiobooks = (\n    length\n    .set_index(\"playlist_name\")\n    .drop(\"Audiobooks\")\n)\nno_audiobooks\n\n\n\n\n\n\n\n\npid\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\nduration_min\n\n\nplaylist_name\n\n\n\n\n\n\n\n\n\n\n\nLinus\n999399\n4\nSound Dreamer\nGrey Noise (90 Minutes) [For Colic, Fussy, Res...\n5403559\nBaby Sleep Solution (White, Red, Pink, Blue, G...\n90.059317\n\n\nAfrobeats\n1944\n125\nBest of 9JA\n9JA Jamz Vol.6 - 6\n4788938\n9JA Jamz Vol.6\n79.815633\n\n\nLust\n1790\n7\nLate Night Tales\nBonobo Late Night Tales Continuous Mix\n4497994\nLate Night Tales - Bonobo\n74.966567\n\n\nGarage\n1791\n158\nGrandmaster Flash\nSalsoul Jam 2000 - Continuous Mix\n3867600\nGrandmaster Flash Presents: Salsoul Jam 2000\n64.460000\n\n\nENO\n999334\n26\nBrian Eno\nThursday Afternoon - 2005 Digital Remaster\n3650800\nThursday Afternoon\n60.846667\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nELECTRONICAS\n877\n29\nBass Modulators\nOxygen - Radio Edit\n186\nOxygen\n0.003100\n\n\n2016\n843\n178\nMarty Grimes\nThe Famm\n0\nThe Famm\n0.000000\n\n\nHood\n1423\n176\nMarty Grimes\nThe Famm\n0\nThe Famm\n0.000000\n\n\nFall 2015\n943\n30\nTigers in the Sky\nParis\n0\nGolden Lights\n0.000000\n\n\nchill time\n693\n67\nMarty Grimes\nThe Famm\n0\nThe Famm\n0.000000\n\n\n\n\n197915 rows × 7 columns\n\n\n\nSimilarly, we can drop duplicate values with drop_duplicates(). Below I have found all unique songs under two minutes (using query ()) and have sorted them in descending order.\n\nshortsongs = spotify.drop_duplicates(subset = [\"track_name\"])\nshortsongs2 = (\n    shortsongs\n    .query(\"duration_min &lt; 2 \")\n    .sort_values(\"duration_min\", ascending = False)\n)\nshortsongs2\n\n\n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\nduration_min\n\n\n\n\n54018\n811\nmusicals\n25\nAnne Hathaway\nFantine’s Arrest\n119946\nLes Misérables: The Motion Picture Soundtrack ...\n1.999100\n\n\n30914\n465\nPunk\n74\nThe Lawrence Arms\nThe Devil's Takin' Names\n119880\nOh! Calcutta!\n1.998000\n\n\n146624\n999184\nBaby Driver\n8\nThe Dave Brubeck Quartet\nUnsquare Dance\n119866\nTime Further Out\n1.997767\n\n\n161498\n999433\nHardcore\n69\nCold World\nThe Games That People Play\n119826\nDedicated To Babies Who Came Feet First\n1.997100\n\n\n30940\n465\nPunk\n100\nMisfits\nLast Caress\n119826\nCollection 2\n1.997100\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n86034\n1288\nnew alt\n92\nalt-J\nDeadcrush\n231\nRELAXER\n0.003850\n\n\n176029\n999652\nparty\n80\nAdmiral C4C\nDrop the Boom\n218\nDrop the Boom\n0.003633\n\n\n936\n16\nslow hands\n84\nalt-J\nIn Cold Blood\n206\nRELAXER\n0.003433\n\n\n59093\n877\nELECTRONICAS\n29\nBass Modulators\nOxygen - Radio Edit\n186\nOxygen\n0.003100\n\n\n46663\n693\nchill time\n67\nMarty Grimes\nThe Famm\n0\nThe Famm\n0.000000\n\n\n\n\n1970 rows × 8 columns"
  },
  {
    "objectID": "posts/welcome/index.html#counting",
    "href": "posts/welcome/index.html#counting",
    "title": "Analyzing Spotify Dataframe",
    "section": "Counting",
    "text": "Counting\nWe can use value_counts() to count the number of times a variable appears in a column (when specified)\n\nspotify.value_counts(\"album_name\")\nspotify.value_counts(\"artist_name\")\n\nartist_name\nDrake             2715\nKanye West        1065\nKendrick Lamar    1035\nRihanna            915\nThe Weeknd         913\n                  ... \nKandia               1\nKane Strang          1\nKano                 1\nKao Bay Bay          1\n터보(Turbo)            1\nName: count, Length: 18866, dtype: int64\n\n\nWe can see that the top artist is Drake. However this could be because some of his songs appear multiple times across different playlists. To see if this is the case, we can find the number of unique songs by each artist.\n\nuniquesongs = spotify.drop_duplicates(subset = [\"track_name\"])\nuniquesongs.value_counts(\"artist_name\")\n\nartist_name\nThe Beatles                 235\nGlee Cast                   227\nPearl Jam                   156\nElectric Light Orchestra    150\nBrian Eno                   144\n                           ... \nJonny Craig                   1\nJonny Lang                    1\nJons                          1\nJonz                          1\n터보(Turbo)                     1\nName: count, Length: 16905, dtype: int64\n\n\nFrom this, we actually see that The Beatles have the most unique songs across all of the playlists."
  },
  {
    "objectID": "posts/welcome/index.html#analyzing-a-specific-artist",
    "href": "posts/welcome/index.html#analyzing-a-specific-artist",
    "title": "Analyzing Spotify Dataframe",
    "section": "Analyzing a Specific Artist",
    "text": "Analyzing a Specific Artist\nCombining all of these methods, we can observe a specific artist within this DataFrame.\n\nTS = (\n    spotify\n    .set_index(\"artist_name\")\n    .loc[\"Taylor Swift\"]\n)\nTS\n#finding all the songs made by Taylor Swift\nTS[\"track_name\"].value_counts()\nTS[\"album_name\"].value_counts()\n#how many times each of her tracks/albums appear\nuniquetaylor = TS.drop_duplicates(subset = (\"track_name\"))\nuniquetaylor\n#len(uniquetaylor)\n  #how many Taylor Swift songs appear (63)\n\n\n\n\n\n\n\n\npid\nplaylist_name\npos\ntrack_name\nduration_ms\nalbum_name\nduration_min\n\n\nartist_name\n\n\n\n\n\n\n\n\n\n\n\nTaylor Swift\n29\ngroovy\n33\nLook What You Made Me Do\n211859\nLook What You Made Me Do\n3.530983\n\n\nTaylor Swift\n44\ntaylor swift\n0\nSafe & Sound - from The Hunger Games Soundtrack\n240066\nThe Hunger Games: Songs From District 12 And B...\n4.001100\n\n\nTaylor Swift\n44\ntaylor swift\n2\nCrazier\n191946\nHannah Montana The Movie\n3.199100\n\n\nTaylor Swift\n64\nElizabeth\n49\nEyes Open\n244586\nThe Hunger Games: Songs From District 12 And B...\n4.076433\n\n\nTaylor Swift\n134\nRap/Pop\n77\nShake It Off\n219200\n1989\n3.653333\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nTaylor Swift\n999531\nthrowback\n119\nOut Of The Woods\n235800\n1989\n3.930000\n\n\nTaylor Swift\n999831\nRoad Music\n48\nAll You Had to Do Was Stay\n193000\n1989\n3.216667\n\n\nTaylor Swift\n999831\nRoad Music\n49\nHow You Get the Girl\n247000\n1989\n4.116667\n\n\nTaylor Swift\n999861\n&lt;333\n77\nMine\n230706\nSpeak Now\n3.845100\n\n\nTaylor Swift\n999965\nfeels\n121\nLast Kiss\n367133\nSpeak Now\n6.118883\n\n\n\n\n63 rows × 7 columns"
  },
  {
    "objectID": "posts/welcome/index.html#conclusion",
    "href": "posts/welcome/index.html#conclusion",
    "title": "Analyzing Spotify Dataframe",
    "section": "Conclusion",
    "text": "Conclusion\nEvidently, a lot can be done to analyze DataFrames. This was just a short introduction to the many methods used in data analysis."
  }
]